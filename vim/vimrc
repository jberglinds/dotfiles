"l vim: nowrap fdm=marker
set encoding=UTF-8

" let g:clipboard = {
"   \ 'name': 'pbcopy',
"   \ 'copy': {
"   \    '+': 'pbcopy',
"   \    '*': 'pbcopy',
"   \  },
"   \ 'paste': {
"   \    '+': 'pbpaste',
"   \    '*': 'pbpaste',
"   \ },
"   \ 'cache_enabled': 0,
"   \ }

" Export bash as shell for plugins
let $SHELL = '/bin/bash'
if has('mac')
    set shell=/bin/bash\ --login
    set shellcmdflag=-c
endif

" Edit vimrc using :Vimconf
command! Vimconf :edit ~/.vim/vimrc

" Set language to english
set langmenu=en_US
let $LANG = 'en_US'

" Plugins {{{1
" Using vim-plug: https://github.com/junegunn/vim-plug
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rsi'
Plug 'itchyny/lightline.vim'
Plug 'mengelbrecht/lightline-bufferline'
Plug 'joshdick/onedark.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-unimpaired'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-surround'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'w0rp/ale'
Plug 'mbbill/undotree'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'rizzatti/dash.vim'
Plug 'exu/pgsql.vim'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-fugitive'
Plug 'jberglinds/coc-jira-autocomplete', {'do': 'yarn install --frozen-lockfile'}

" Language specific
Plug 'tpope/vim-dispatch', { 'for': 'clojure' }
Plug 'tpope/vim-salve', { 'for': 'clojure' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
call plug#end()

let g:salve_auto_start_repl=1

" Plugin configuration
" onedark.vim {{{2
" Enable italics
let g:onedark_terminal_italics=1

" FZF {{{2
" Invoke with CTRL-P
map <silent> <c-p> :FZF<CR>

" Search active buffers with Leader-B
nmap <silent> <Leader>b :Buffers<CR>

let g:fzf_action = {
  \ 'ctrl-v': 'vsplit' }


" Rainbow Parentheses {{{2
" Activate for lisps
augroup rainbow_lisp
  autocmd!
  autocmd FileType lisp,clojure,scheme RainbowParentheses
augroup END

" Lightline (+ Bufferline) {{{2
" Always show tabline
set showtabline=2

" Show open buffers in tabline
let g:lightline = {
      \ 'colorscheme': 'one',
      \ 'tabline': {
      \   'left': [['buffers']],
      \   'right': []
      \ },
      \ 'component_expand': {
      \   'buffers': 'lightline#bufferline#buffers',
      \ },
      \ 'component_type': {
      \   'buffers': 'tabsel',
      \ },
      \ }

" Show only name of files, not paths
let g:lightline#bufferline#filename_modifier = ':t'

" Dash {{{2
" Search word under cursor in Dash with Leader-D
nnoremap <silent> <leader>d :Dash<CR>

" coc.nvim {{{2
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300

" Don't give |ins-completion-menu| messages.
set shortmess+=c

" Keep signs column open
set signcolumn=yes

" Cycle completions using tab
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Confirm completion with <CR>
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Show hover documentation in floating window with Leader-H
nnoremap <silent> <Leader>h :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Rename word under cursor with Leader-R
nmap <leader>r <Plug>(coc-rename)

" Format selected region with Leader-F
vmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" ALE {{{2

" Use ballons for hover documentation if available
" let g:ale_set_balloons = 1

" Fix ALE inserting completions automatically
" set completeopt=menu,menuone,preview,noselect,noinsert

" Setup linters and fixers
" let g:ale_linters = {
"       \   'python': ['pyls'],
"       \}
" let g:ale_fixers = {
"       \   'javascript': ['eslint', 'prettier'],
"       \   'typescript': ['tslint'],
"       \}

" Setup completion
" let g:ale_completion_enabled = 1
" Fix on save
" let g:ale_fix_on_save = 1

" let g:ale_lint_delay = 50

" nnoremap <silent> <Leader>h :ALEHover<CR>
" nnoremap <silent> gd :ALEGoToDefinition<CR>
" }}}1

" Remap space key to leader
map <Space> <Leader>

" Highlight search hits but clear highlight on escape
set hlsearch
nnoremap <silent> <esc> :noh<return><esc>

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Instead of failing command because of unsaved changes, raise a dialog to ask
" for save
set confirm

" Allow switching buffers without saving
set hidden

" Don't make a sound or flash when doing something wrong
set visualbell
set t_vb=

" Enable the mouse in all modes
set mouse=a

" Set the command window height to 2 lines
set cmdheight=2

" Display line-numbers on the left
set number

" Indentation settings, use soft tabs - 2 spaces
set shiftwidth=2
set tabstop=2
set expandtab

" True colors for colorscheme
if (has("termguicolors"))
  set termguicolors
endif

" Colorscheme settings
syntax on
colorscheme onedark

" Mark 80th column
set colorcolumn=80

" Highlighting unwanted spaces/tabs
highlight TabHighlight ctermbg=236
highlight ExtraWhitespace ctermbg=236 guibg=#2c323c
match TabHighlight /\t/
match ExtraWhitespace /\s\+$/

" Hide stuff like scrollbars in macVim
set guioptions=

" Format whole file using prettier
command! -nargs=0 Prettier :CocCommand prettier.formatFile

let g:netrw_keepdir=0
