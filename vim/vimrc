" vim: nowrap fdm=marker

" Edit vimrc using :Vimconf
command! Vimconf :edit $MYVIMRC

" Plugins {{{1
" Using vim-plug: https://github.com/junegunn/vim-plug
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'
Plug 'bling/vim-bufferline'
Plug 'itchyny/lightline.vim'
Plug 'joshdick/onedark.vim'
Plug 'scrooloose/nerdtree'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-unimpaired'
Plug 'lyokha/vim-xkbswitch'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-surround'
Plug 'w0rp/ale'
Plug 'airblade/vim-gitgutter'
Plug 'mbbill/undotree'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'rizzatti/dash.vim'

" Deoplete auto completion with plugins
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

" Language specific
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
call plug#end()

" Plugin configuration
" onedark.vim {{{2
" Enable italics
let g:onedark_terminal_italics=1

" Deoplete {{{2
" Enable on startup
let g:deoplete#enable_at_startup = 1
" Cycle suggestions by tabbing
inoremap <silent><expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"
inoremap <silent><expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"

" FZF {{{2
" Invoke with CTRL-P
map <c-p> :FZF<CR>

" Search active buffers with Leader-B
nmap <Leader>b :Buffers<CR>

" Rainbow Parentheses {{{2
" Activate for lisps
augroup rainbow_lisp
  autocmd!
  autocmd FileType lisp,clojure,scheme RainbowParentheses
augroup END

" Lightline (+ Bufferline) {{{2
let g:lightline = {
      \ 'colorscheme': 'one',
      \ 'tabline': {
      \   'left': [['bufferline']],
      \   'right': []
      \ },
      \ 'component_expand': {
      \   'bufferline': 'LightlineBufferline',
      \ },
      \ 'component_type': {
      \   'bufferline': 'tabsel',
      \ },
      \ }

" Show open buffers in tabline
set showtabline=2
let g:bufferline_active_buffer_left = ''
let g:bufferline_active_buffer_right = ''
function! LightlineBufferline()
  call bufferline#refresh_status()
  return [ g:bufferline_status_info.before, g:bufferline_status_info.current, g:bufferline_status_info.after]
endfunction

" vim-xkbswitch {{{2
" Switch keyboards automatically between normal and insert
let g:XkbSwitchEnabled = 1
let g:XkbSwitchLib = '/usr/local/lib/libxkbswitch.dylib'

" Dash {{{2
" Set keywordprg to the Dash command to use it when pressing K
set keywordprg=:Dash

" ALE {{{2
" Setup fixers
let g:ale_fixers = {
      \   'javascript': ['eslint'],
      \   'typescript': ['tslint'],
      \}
" }}}1

" Remap space key to leader
map <Space> <Leader>

" Show partial commands in the last line of the screen
" set showcmd

" Highlight search hits
set hlsearch

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Instead of failing command because of unsaved changes, raise a dialog to ask
" for save
set confirm

" Allow switching buffers without saving
set hidden

" Don't make a sound or flash when doing something wrong
set visualbell
set t_vb=

" Enable the mouse in all modes
set mouse=a

" Set the command window height to 2 lines, to avoid having to press enter in
" some cases
set cmdheight=2

" Display line-numbers on the left
set number

" Indentation settings, use soft tabs - 2 spaces
set shiftwidth=2
set tabstop=2
set expandtab


" True colors for colorscheme
if (has("termguicolors"))
  set termguicolors
endif

" Colorscheme settings
syntax on
colorscheme onedark

" Mark 80th column
set colorcolumn=80

" Highlighting unwanted spaces/tabs
highlight TabHighlight ctermbg=236
highlight ExtraWhitespace ctermbg=236 guibg=#2c323c
match TabHighlight /\t/
match ExtraWhitespace /\s\+$/

" Hide stuff like scrollbars in macVim
set guioptions=

" Move lines up/down using CTRL-k/j
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-k> :m '<-2<CR>gv=gv
vnoremap <C-j> :m '>+1<CR>gv=gv
