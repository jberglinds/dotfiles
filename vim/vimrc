" vim-plug plugins
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'
Plug 'vim-airline/vim-airline'
Plug 'joshdick/onedark.vim'
Plug 'scrooloose/nerdtree'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-unimpaired'
Plug 'lyokha/vim-xkbswitch'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-surround'
Plug 'w0rp/ale'
Plug 'airblade/vim-gitgutter'
Plug 'zhaocai/goldenview.vim'
Plug 'mbbill/undotree'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'rizzatti/dash.vim'

" Deoplete auto completion with plugins
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

" Language specific
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
call plug#end()

" Edit vimrc using :Vimconf
command! Vimconf :edit $MYVIMRC

" Enable deoplete at startup
let g:deoplete#enable_at_startup = 1
" use tab to forward cycle
inoremap <silent><expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
" use tab to backward cycle
inoremap <silent><expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"

" Remap space key to leader
map <Space> <Leader>

" Show partial commands in the last line of the screen
" set showcmd

" Highlight search hits
set hlsearch

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Instead of failing command because of unsaved changes, raise a dialog to ask
" for save
set confirm

" Allow switching buffers without saving
set hidden

" Don't make a sound or flash when doing something wrong
set visualbell
set t_vb=

" Enable the mouse in all modes
" set mouse=a

" Disable arrow keys, for learning vim
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" FZF search with ctrl p
map <c-p> :FZF<CR>

" Set the command window height to 2 lines, to avoid having to press enter in
" some cases
set cmdheight=2

" Display line-numbers on the left
set number

" Indentation settings, use soft tabs - 2 spaces
set shiftwidth=2
set tabstop=2
set expandtab

" Activate rainbow parentheses for lisps
augroup rainbow_lisp
  autocmd!
  autocmd FileType lisp,clojure,scheme RainbowParentheses
augroup END

" vim airline settings
let g:airline_theme='onedark'
let g:airline_powerline_fonts=1
let g:airline_extensions = ['tabline', 'ale']
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#ale#enabled = 1

" Switch keyboards automatically between normal and insert
let g:XkbSwitchEnabled = 1
let g:XkbSwitchLib = '/usr/local/lib/libxkbswitch.dylib'

" Disable mappings for golden view by default and add the split mapping
let g:goldenview__enable_default_mapping = 0
nmap <silent> <C-L> <Plug>GoldenViewSplit

" Search buffers with fzf
nmap <Leader>b :Buffers<CR>

" True colors for colorscheme
if (has("termguicolors"))
  set termguicolors
endif

" Colorscheme settings
syntax on
let g:onedark_terminal_italics=1
colorscheme onedark

" Mark 80th column
set colorcolumn=80

" Highlighting unwanted spaces/tabs
highlight TabHighlight ctermbg=236
highlight ExtraWhitespace ctermbg=236 guibg=#2c323c
match TabHighlight /\t/
match ExtraWhitespace /\s\+$/

" Hide stuff like scrollbars in macVim
set guioptions=

" Search word under cursor in Dash using K
set keywordprg=:Dash

" Fixers to use with ALE
let g:ale_fixers = {
\   'javascript': ['eslint'],
\   'typescript': ['tslint'],
\}

" Move lines up/down using CTRL-k/j
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-k> :m '<-2<CR>gv=gv
vnoremap <C-j> :m '>+1<CR>gv=gv
